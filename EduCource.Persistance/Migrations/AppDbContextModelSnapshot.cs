// <auto-generated />
using System;
using EduCource.Persistance.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EduCource.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EduCource.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.CourseStudent", b =>
                {
                    b.Property<Guid>("CourcseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("CourcseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudents");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77589501-22b7-4fa2-9436-534c0c46913e"),
                            Name = "Uzbekistan",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("33517080-5e99-4591-b85d-2ed1ebf3bd98"),
                            Name = "Tashkent",
                            ParentId = new Guid("77589501-22b7-4fa2-9436-534c0c46913e"),
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("5eccba7f-4361-4ee6-832f-35ab309786cd"),
                            Name = "Navoiy",
                            ParentId = new Guid("77589501-22b7-4fa2-9436-534c0c46913e"),
                            Type = 1
                        });
                });

            modelBuilder.Entity("EduCource.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.UserSettings", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDarkMood")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.ToTable("UserSettingses");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.Course", b =>
                {
                    b.HasOne("EduCource.Domain.Entities.User", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.CourseStudent", b =>
                {
                    b.HasOne("EduCource.Domain.Entities.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourcseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCource.Domain.Entities.User", "Student")
                        .WithMany("CourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.Location", b =>
                {
                    b.HasOne("EduCource.Domain.Entities.Location", "ParentLocation")
                        .WithMany("ChildLocations")
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.Role", b =>
                {
                    b.HasOne("EduCource.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("EduCource.Domain.Entities.Role", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduCource.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.UserSettings", b =>
                {
                    b.HasOne("EduCource.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("EduCource.Domain.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduCource.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.Location", b =>
                {
                    b.Navigation("ChildLocations");
                });

            modelBuilder.Entity("EduCource.Domain.Entities.User", b =>
                {
                    b.Navigation("CourseStudents");

                    b.Navigation("Roles");

                    b.Navigation("TeacherCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
